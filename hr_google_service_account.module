<?php

/**
 * Implements hook_init().
 */

function hr_google_service_account_init() {
  $path = libraries_get_path('google-api-php-client');
  if ($path) {
    set_include_path($path."/src/" . PATH_SEPARATOR . get_include_path());
  }
}

/**
 * Implements hook_libraries_info().
 */

function hr_google_service_account_libraries_info() {
  $path = libraries_get_path('google-api-php-client');
  set_include_path($path."/src/" . PATH_SEPARATOR . get_include_path());
  $libraries['google-api-php-client'] = array(
    'name' => 'Google OAuth2 Library',
    'vendor url' => 'http://code.google.com/p/google-api-php-client',
    'download url' => 'http://github.com/google/google-api-php-client/archive/master.zip',
    'version arguments' => array(
      'file' => 'src/Google/Client.php',
      'pattern' => '/LIBVER = "([0-9\.a-z]+)/',
      'lines' => 40,
    ),
    'versions' => array(
      '1.0.5-beta' => array(),
    ),
    'files' => array(
      'php' => array(
        'src/Google/Client.php',
        'src/Google/Auth/AssertionCredentials.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_permission().
 */

function hr_google_service_account_permmision(){
  return array(
    'administer google apps for humanitarianresponse' => array(
    'title' => t('Administer Google Apps for HumanitarianResponse'),
    'description' => t('Administer Google Apps Configuration for HumanitarianResponse'),
    ),
  );
}

/**
 * Implements hook_menu().
 */

function hr_google_service_account_menu(){
  $items = array();
  $items['admin/config/system/hr-google-apps'] = array(
    'title' => 'Google Apps for HumanitarianResponse Configuration',
    'description' => 'Administer Google Apps settings for HumanitarianResponse Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_google_service_admin_config'),
    'access arguments' => array('administer google apps for humanitarianresponse'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function hr_google_service_admin_config($form_state){
  drupal_set_title('Google Apps for HumanitarianResponse Configuration.');

  $form['google_apps_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Apps configuration settings'),
    '#collapsible' => TRUE,
    '#description' => t('Google Apps configuration settings for HumanitarianResponse.'),
  );
  $form['google_apps_settings']['hr_google_service_application_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Name'),
    '#default_value' => variable_get('hr_google_service_application_name', ''),
    '#size' => 80,
    '#maxlength' => 255,
    '#description' => t('The Application\'s name, eg humanitarianresponse.'),
  );
  $form['google_apps_settings']['hr_google_service_account_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Account Name'),
    '#default_value' => variable_get('hr_google_service_account_name', ''),
    '#size' => 80,
    '#maxlength' => 255,
    '#description' => t('The Application\'s service account name.'),
  );
  $form['google_apps_settings']['hr_google_service_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Id'),
    '#default_value' => variable_get('hr_google_service_client_id', ''),
    '#size' => 80,
    '#weight' => 3,
    '#description' => t('The Application\'s client Id. This is provided by google when you create a new client id for your project.'),
  );
  $form['google_apps_settings']['hr_google_service_delegate'] = array(
    '#type' => 'textfield',
    '#title' => t('Delegate'),
    '#default_value' => variable_get('hr_google_service_delegate', ''),
    '#size' => 80,
    '#maxlength' => 255,
    '#weight' => 4,
    '#description' => t('The Application\'s Delegate(with which the client application will be perfoming requests for). This should be the admin account address e.g info@humanitarianresponse.info'),
  );
  return system_settings_form($form);
}

/**
*  Helper function to create an email using the Google directory API.
*  @param: $email_address - the user/email to be created.
*  @param: $password - the password value.
*  @param: $name - user name.
*  @param: $operation_or_space_name eg philippines : This might change according how the naming convention will be
*  decided.
*  Currently we just fetch these parameters from the supplied form for demo purposes. This can be extended to
*  be used as required.
*/
function _hr_google_service_account_create_email($email_address, $password, $name, $operation_or_space_name){
  $client_id = variable_get('hr_google_service_client_id', '');
  $client_application_name = variable_get('hr_google_service_application_name', '');
  $service_account_name = variable_get('hr_google_service_account_name', '');
  $key_file_location = drupal_get_path('module', 'hr_google_service_account') . '/files/HumanitarianResponse-Manager-9920a4fb5c04.p12';
  $delegate = variable_get('hr_google_service_delegate', '');

  $scopes = array('https://www.googleapis.com/auth/admin.directory.user');
  if(isset($key_file_location)){
    $key = file_get_contents($key_file_location);
  }
  else{
    drupal_set_message(t("Please ask your admin to set the correct path for the .p12 key file from Google"), 'error');
    return FALSE;
  }
  $info = libraries_load('google-api-php-client');
  if (!$info['loaded']) {
    drupal_set_message(t("Can't authenticate with google as library is missing check Status report or Readme for requirements"), 'error');
    return FALSE;
  }
  $cred = new Google_Auth_AssertionCredentials($service_account_name, $scopes, $key);
  $cred->sub = $delegate;

  $client = new Google_Client();
  if(isset($client_application_name) && isset($client_id) && isset($cred)){
    $client->setApplicationName($client_application_name);
    $client->setClientId($client_id);
    $client->setAssertionCredentials($cred);
    $service = new Google_Service_Directory($client);
  }
  else{
    drupal_set_message(t("Google Apps client settings for HumanitarinResponse is not properly set, please consult your admin."), 'error');
    return FALSE;
  }
  if(isset($_SESSION['service_token'])){
    $client->setAccessToken($_SESSION['service_token']);
  }
  if($client->getAuth()->isAccessTokenExpired()){
    $client->getAuth()->refreshTokenWithAssertion($cred);
  }
  $_SESSION['service_token'] = $client->getAccessToken();

  $name = $name;
  $operation_or_space_name = $operation_or_space_name;
  //TODO: interchange $name and $operation_or_space_name below
  $full_address = $name ." ".$operation_or_space_name;
  $email_address = $email_address;
  $password = $password;

  $user_name = new Google_Service_Directory_UserName();
  $user_name->setFamilyName($name);
  $user_name->setFullName($full_address);
  $user_name->setGivenName($operation_or_space_name);

  $user = new Google_Service_Directory_User();
  $user->setName($user_name);
  $user->setPassword($password);
  $user->setPrimaryEmail($email_address. '@humanitarianresponse.info');
  //specify optional parameters here
  $optParams = array();
  if($service->users->insert($user, $optParams)){
    drupal_set_message('Email address created successfully!');
  }
  else{
    drupal_set_message('Error creating email address');
  }
}

/*
*  Implements hook_node_insert().
*/

function hr_google_service_account_node_insert($node){
  switch ($node->type) {
    //Cluster content type
    case 'hr_bundle':
    //Get the organic group membership for the node
    $id = $node->nid;
    $cluster_name = $node->title;
    foreach (og_get_entity_groups('node', $id) as $entity_type => $og_memberships){
      foreach ($og_memberships as $membership_id => $entity_id) {
        if ($entity_type == 'node') {
          $group_node = node_load($entity_id);
          //Make sure we are getting the iso2 codes for countries, and not try to fetch for regions.
          if($group_node->field_operation_type['und']['0']['value'] == 'country'){
            $tid = $group_node->field_country['und']['0']['target_id'];
            $term = taxonomy_term_load($tid);
            //Make sure it comes from the locations taxonomy
            if($term->vid == '3'){
              $p_code = strtolower($term->field_pcode['und']['0']['value']);
              module_load_include('inc', 'hr_google_service_account', 'includes/hr_google_service_account');
              $cluster_acronym = strtolower(_hr_google_service_account_get_cluster_acronym($cluster_name));
              $email_address = $p_code . '.' .$cluster_acronym;
              $password = 'humanitarianresponse';
              $name = 'email';
              $operation_or_space_name = $email_address;
              _hr_google_service_account_create_email($email_address, $password, $name, $operation_or_space_name);
              drupal_set_message($email_address);
            }
          }
        }
      }
    }
    break;

    case 'hr_operation':
      $email_address = strtolower($node->title);
      $password = $email_address .'@humanitarianresponse2014';
      $name = 'email';
      $operation_or_space_name = $node->title;
      _hr_google_service_account_create_email($email_address, $password, $name, $operation_or_space_name);
    break;

    case 'hr_space':
      $email_address = strtolower($node->title);
      $password = $email_address .'@humanitarianresponse2014';
      $name = 'email';
      $operation_or_space_name = $node->title;
      _hr_google_service_account_create_email($email_address, $password, $name, $operation_or_space_name);
    break;

    case 'hr_sector':
      $email_address = strtolower($node->title);
      $password = $email_address .'@humanitarianresponse2014';
      $name = 'email';
      $operation_or_space_name = $node->title;
      _hr_google_service_account_create_email($email_address, $password, $name, $operation_or_space_name);
    break;
  }
}


